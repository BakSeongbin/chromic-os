// Copyright (c) 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'gaia-button',

  properties: {
    disabled: {
      type: Boolean,
      value: false,
      reflectToAttribute: true
    },

    type: {
      type: String,
      value: '',
      reflectToAttribute: true,
      observer: 'typeChanged_'
    }
  },

  focus: function() {
   this.$.button.focus();
  },

  focusedChanged_: function() {
    if (this.type == 'link' || this.type == 'dialog')
      return;
    this.$.button.raised = this.$.button.focused;
  },

  typeChanged_: function() {
    if (this.type == 'link')
      this.$.button.setAttribute('noink', '');
    else
      this.$.button.removeAttribute('noink');
  },

  onClick_: function(e) {
    if (this.disabled)
      e.stopPropagation();
  }
});

Polymer({
  is: 'gaia-icon-button',

  properties: {
    disabled: {
      type: Boolean,
      value: false,
      reflectToAttribute: true
    },

    icon: String,

    ariaLabel: String
  },

  focus: function() {
    this.$.iconButton.focus();
  },

  onClick_: function(e) {
    if (this.disabled)
      e.stopPropagation();
  }
});


// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'gaia-card'
});

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'gaia-header',

  properties: {
    email: String
  }
});

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'gaia-input-form',

  properties: {
    disabled: {
      type: Boolean,
      observer: 'onDisabledChanged_',
    },

    buttonText: String
  },

  submit: function() {
    this.fire('submit');
  },

  onButtonClicked_: function() {
    this.submit();
  },

  getInputs_: function() {
    return Polymer.dom(this.$.inputs).getDistributedNodes();
  },

  onKeyDown_: function(e) {
    if (e.keyCode != 13 || this.$.button.disabled)
      return;
    if (this.getInputs_().indexOf(e.target) == -1)
      return;
    this.onButtonClicked_();
  },

  getControls_: function() {
    var controls = this.getInputs_();
    controls.push(this.$.button);
    return controls.concat(Polymer.dom(this).querySelectorAll('gaia-button'));
  },

  onDisabledChanged_: function(disabled) {
    this.getControls_().forEach(function(control) {
      control.disabled = disabled;
    });
  }
});

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer((function() {
  var INPUT_EMAIL_PATTERN = "^[a-zA-Z0-9.!#$%&'*+=?^_`{|}~-]+(@[^\\s@]+)?$";

  return {
    is: 'gaia-input',

    properties: {
      label: String,
      value: {
        notify: true,
        observer: 'updateDomainVisibility_',
        type: String
      },

      type: {
        observer: 'typeChanged_',
        type: String
      },

      domain: {
        observer: 'updateDomainVisibility_',
        type: String
      },

      disabled: Boolean,

      required: Boolean,

      error: String,

      isInvalid: Boolean
    },

    attached: function() {
      this.typeChanged_();
    },

    onKeyDown: function(e) {
      this.isInvalid = false;
    },

    updateDomainVisibility_: function() {
      this.$.domainLabel.hidden = (this.type !== 'email') || !this.domain ||
          (this.value && this.value.indexOf('@') !== -1);
    },

    onTap: function() {
      this.isInvalid = false;
    },

    focus: function() {
      this.$.input.focus();
    },

    checkValidity: function() {
      var valid = this.$.input.validate();
      this.isInvalid = !valid;
      return valid;
    },

    typeChanged_: function() {
      if (this.type == 'email') {
        this.$.input.pattern = INPUT_EMAIL_PATTERN;
        this.$.input.type = 'text';
      } else {
        this.$.input.removeAttribute('pattern');
        this.$.input.type = this.type;
      }
      this.updateDomainVisibility_();
    }
  };
})());


// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'gaia-password-changed',

  properties: {
    email: String,

    disabled: {
      type: Boolean,
      value: false
    }
  },

  ready: function() {
    /**
     * Workaround for
     * https://github.com/PolymerElements/neon-animation/issues/32
     * TODO(dzhioev): Remove when fixed in Polymer.
     */
    var pages = this.$.animatedPages;
    delete pages._squelchNextFinishEvent;
    Object.defineProperty(pages, '_squelchNextFinishEvent',
        { get: function() { return false; } });
  },

  invalidate: function() {
    this.$.oldPasswordInput.isInvalid = true;
  },

  reset: function() {
    this.$.animatedPages.selected = 0;
    this.clearPassword();
    this.$.oldPasswordInput.isInvalid = false;
    this.disabled = false;
    this.$.navigation.closeVisible = true;
    this.$.oldPasswordCard.classList.remove('disabled');
  },


  focus: function() {
    if (this.$.animatedPages.selected == 0)
      this.$.oldPasswordInput.focus();
  },

  onPasswordSubmitted_: function() {
    if (!this.$.oldPasswordInput.checkValidity())
      return;
    this.$.oldPasswordCard.classList.add('disabled');
    this.disabled = true;
    this.fire('passwordEnter', {password: this.$.oldPasswordInput.value});
  },

  onForgotPasswordClicked_: function() {
    this.clearPassword();
    this.$.animatedPages.selected += 1;
  },

  onTryAgainClicked_: function() {
    this.$.oldPasswordInput.isInvalid = false;
    this.$.animatedPages.selected -= 1;
  },

  onAnimationFinish_: function() {
    this.focus();
  },

  clearPassword: function() {
    this.$.oldPasswordInput.value = '';
  },

  onProceedClicked_: function() {
    this.disabled = true;
    this.$.navigation.closeVisible = false;
    this.$.animatedPages.selected = 2;
    this.fire('proceedAnyway');
  },

  onClose_: function() {
    this.fire('cancel');
  }
});

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'html-echo',

  properties: {
    content: {
      type: String,
      observer: 'contentChanged_'
    }
  },

  contentChanged_: function(content) {
    this.innerHTML = content;
  }
});

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer((function() {
  var DEFAULT_EMAIL_DOMAIN = '@gmail.com';

  var TRANSITION_TYPE = {
    FORWARD: 0,
    BACKWARD: 1,
    NONE: 2
  };

  return {
    is: 'offline-gaia',

    properties: {
      disabled: {
        type: Boolean,
        value: false
      },

      showEnterpriseMessage: {
        type: Boolean,
        value: false
      },

      domain: {
        type: String,
        observer: 'onDomainChanged_'
      },

      emailDomain: String
    },

    ready: function() {
      /**
       * Workaround for
       * https://github.com/PolymerElements/neon-animation/issues/32
       * TODO(dzhioev): Remove when fixed in Polymer.
       */
      var pages = this.$.animatedPages;
      delete pages._squelchNextFinishEvent;
      Object.defineProperty(pages, '_squelchNextFinishEvent',
          { get: function() { return false; } });
    },

    focus: function() {
      if (this.isEmailSectionActive_())
        this.$.emailInput.focus();
      else
        this.$.passwordInput.focus();
    },

    back: function() {
      this.switchToEmailCard(true /* animated */);
    },

    onDomainChanged_: function() {
      this.$.managedBy.textContent =
        loadTimeData.getStringF('enterpriseInfoMessage', this.domain);
      this.showEnterpriseMessage = !!this.domain.length;
    },

    onAnimationFinish_: function() {
      this.fire('backButton', !this.isEmailSectionActive_());
      this.focus();
    },

    onForgotPasswordClicked_: function() {
      this.$.forgotPasswordDlg.fitInto = this;
      this.disabled = true;
      this.fire('dialogShown');
      this.$.forgotPasswordDlg.open();
      this.$.passwordCard.classList.add('full-disabled');
      this.$.forgotPasswordDlg.focus();
    },

    onDialogOverlayClosed_: function() {
      this.fire('dialogHidden');
      this.disabled = false;
      this.$.passwordCard.classList.remove('full-disabled');
    },

    setEmail: function(email) {
      if (email) {
        if (this.emailDomain)
          email = email.replace(this.emailDomain, '');
        this.switchToPasswordCard(email, false /* animated */);
        this.$.passwordInput.isInvalid = true;
        this.fire('backButton', true);
      } else {
        this.$.emailInput.value = '';
        this.switchToEmailCard(false /* animated */);
      }
    },

    isRTL_: function() {
      return !!document.querySelector('html[dir=rtl]');
    },

    isEmailSectionActive_: function() {
      return this.$.animatedPages.selected == 'emailSection';
    },

    switchToEmailCard(animated) {
      this.$.passwordInput.value = '';
      this.$.passwordInput.isInvalid = false;
      this.$.emailInput.isInvalid = false;
      if (this.isEmailSectionActive_())
        return;
      this.setUpPageTransitions_(
          animated ? TRANSITION_TYPE.BACKWARD : TRANSITION_TYPE.NONE);
      this.$.animatedPages.selected = 'emailSection';
    },

    switchToPasswordCard(email, animated) {
      this.$.emailInput.value = email;
      if (email.indexOf('@') === -1) {
        if (this.emailDomain)
          email = email + this.emailDomain;
        else
          email = email + DEFAULT_EMAIL_DOMAIN;
      }
      this.$.passwordHeader.email = email;
      if (!this.isEmailSectionActive_())
        return;
      this.setUpPageTransitions_(
          animated ? TRANSITION_TYPE.FORWARD : TRANSITION_TYPE.NONE);
      this.$.animatedPages.selected = 'passwordSection';
    },

    onEmailSubmitted_: function() {
      if (this.$.emailInput.checkValidity())
        this.switchToPasswordCard(this.$.emailInput.value, true /* animated */);
      else
        this.$.emailInput.focus();
    },

    onPasswordSubmitted_: function() {
      if (!this.$.passwordInput.checkValidity())
        return;
      var msg = {
        'useOffline': true,
        'email': this.$.passwordHeader.email,
        'password': this.$.passwordInput.value
      };
      this.$.passwordInput.value = '';
      this.fire('authCompleted', msg);
    },

    setUpPageTransitions_: function(transitionType) {
      if (transitionType === TRANSITION_TYPE.NONE) {
        this.$.animatedPages.entryAnimation = '';
        this.$.animatedPages.exitAnimation = '';
        return;
      }
      var isForward = transitionType === TRANSITION_TYPE.FORWARD;
      var isRTL = this.isRTL_();
      this.$.animatedPages.entryAnimation =
          'slide-from-' + (isForward === isRTL ? 'left' : 'right') +
          '-animation';
      this.$.animatedPages.exitAnimation =
          'slide-' + (isForward === isRTL ? 'right' : 'left') + '-animation';
    }
  };
})());

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'saml-confirm-password',

  properties: {
    email: String,

    disabled: {
      type: Boolean,
      value: false,
      observer: 'disabledChanged_'
    }
  },

  ready: function() {
    /**
     * Workaround for
     * https://github.com/PolymerElements/neon-animation/issues/32
     * TODO(dzhioev): Remove when fixed in Polymer.
     */
    var pages = this.$.animatedPages;
    delete pages._squelchNextFinishEvent;
    Object.defineProperty(pages, '_squelchNextFinishEvent',
        { get: function() { return false; } });
  },

  reset: function() {
    this.$.cancelConfirmDlg.close();
    this.disabled = false;
    this.$.navigation.closeVisible = true;
    if (this.$.animatedPages.selected != 0)
      this.$.animatedPages.selected = 0;
    this.$.passwordInput.value = '';
  },

  invalidate: function() {
    this.$.passwordInput.isInvalid = true;
  },

  focus: function() {
    if (this.$.animatedPages.selected == 0)
      this.$.passwordInput.focus();
  },

  onClose_: function() {
    this.disabled = true;
    this.$.cancelConfirmDlg.fitInto = this;
    this.$.cancelConfirmDlg.open();
  },

  onConfirmCancel_: function() {
    this.fire('cancel');
  },

  onPasswordSubmitted_: function() {
    if (!this.$.passwordInput.checkValidity())
      return;
    this.$.animatedPages.selected = 1;
    this.$.navigation.closeVisible = false;
    this.fire('passwordEnter', {password: this.$.passwordInput.value});
  },

  onDialogOverlayClosed_: function() {
    this.disabled = false;
  },

  disabledChanged_: function(disabled) {
    this.$.confirmPasswordCard.classList.toggle('full-disabled', disabled);
  },

  onAnimationFinish_: function() {
    if (this.$.animatedPages.selected == 1)
      this.$.passwordInput.value = '';
  }
});

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'saml-interstitial',

  properties: {
    changeAccountLink: {
      type: HTMLElement,
    },

    domain: {
      type: String,
      observer: 'onDomainChanged_'
    },

    showDomainMessages_: {
      type: Boolean,
      value: false
    }
  },
  ready: function() {
    this.changeAccountLink = this.$.changeAccountLink;
  },
  submit: function() {
    this.$.samlInterstitialForm.submit();
  },
  onDomainChanged_: function() {
    this.$.managedBy.textContent =
      loadTimeData.getStringF('enterpriseInfoMessage', this.domain);
    this.$.message.content =
      loadTimeData.getStringF('samlInterstitialMessage', this.domain);
    this.showDomainMessages_ = !!this.domain.length;
  },
  onSamlPageNextClicked_: function() {
    this.fire('samlPageNextClicked');
  },
  onSamlPageChangeAccountClicked_: function() {
    this.fire('samlPageChangeAccountClicked');
  }
});

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'throbber-notice',

  properties: {
    text: String
  }
});

// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'navigation-bar',

  properties: {
    backVisible: {
      type: Boolean,
      value: false
    },
    closeVisible: {
      type: Boolean,
      value: false
    },
    refreshVisible: {
      type: Boolean,
      value: false
    },
    disabled: {
      type: Boolean,
      value: false
    }
  },

  onBack_: function() { this.fire('back'); },
  onClose_: function() { this.fire('close'); },
  onRefresh_: function() { this.fire('refresh'); }
});

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

Polymer({
  is: 'unrecoverable-cryptohome-error-card',

  onContinueClicked_: function() {
    this.fire('done');
  },
});

